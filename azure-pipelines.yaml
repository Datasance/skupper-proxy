trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - develop
      - release*
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - LICENSE
pr: none

variables:
  ref: $(Build.SourceBranch)
  buildTag: $(Build.BuildId)
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  version: ''

stages:
- stage: Build
  jobs:
  - job: images
    timeoutInMinutes: 240
    strategy:
      matrix:
        amd64:
          poolImageName: 'Azure Pipelines'
          imageTagSuffix: 'amd64'
        arm32v7:
          poolImageName: 'build-farm-rpi4'
          imageTagSuffix: 'arm32v7'
        arm64v8:
          poolImageName: 'build-farm-coral'
          imageTagSuffix: 'arm64v8'

    pool: $(poolImageName)

    variables:
      repository: 'focal-freedom-236620/proxy'
      publicRepository: 'iofog/proxy'
    steps:
    - template: pipeline/setversion.yaml
    - task: Docker@2
      displayName: 'build and push docker image'
      inputs:
        containerRegistry: 'Edgeworx GCP'
        repository: $(repository)
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile.iofog'
        tags: |
          $(Build.SourceBranchName)
          $(version)-$(imageTagSuffix)
    - task: Docker@2
      displayName: Login to Dockerhub
      condition: eq(variables['isRelease'], true)
      inputs:
        command: login
        containerRegistry: Edgeworx DockerHub
    - script: |
        docker tag gcr.io/$(repository):$(version)-$(imageTagSuffix) $(publicRepository):$(version)-$(imageTagSuffix)
        docker push $(publicRepository):$(version)-$(imageTagSuffix)
      displayName: 'Publish Public Docker Image'
      condition: eq(variables['isRelease'], true)
    
- stage: Publish
  jobs:
  - job: Dev
    pool:
      vmImage: 'Ubuntu-latest'
    steps:
    - template: pipeline/setversion.yaml
    - task: Docker@2
      displayName: Login to Dockerhub
      inputs:
        command: login
        containerRegistry: Edgeworx GCP
    - script: |
        docker pull gcr.io/$(repository):$(version)-amd64
        docker pull gcr.io/$(repository):$(version)-arm32v7
        docker pull gcr.io/$(repository):$(version)-arm64v8
      displayName: 'Pull $(repository) amd64, arm32v7, and arm64v8 docker images'
    - script: |
        docker manifest create \
          gcr.io/$(repository):$(version) \
          --amend gcr.io/$(repository):$(version)-amd64 \
          --amend gcr.io/$(repository):$(version)-arm32v7 \
          --amend gcr.io/$(repository):$(version)-arm64v8
      displayName: 'Create $(repository) image manifest'
    - script: |
        docker manifest push gcr.io/$(repository):$(version)
      displayName: 'Push $(repository) image manifest'
      
  - job: Prod
    condition: eq(variables['isRelease'], true)
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
    - template: pipeline/setversion.yaml
    - task: Docker@2
      displayName: Login to Dockerhub
      inputs:
        command: login
        containerRegistry: Edgeworx DockerHub
    - script: |
        docker pull $(publicRepository):$(version)-amd64
        docker pull $(publicRepository):$(version)-arm32v7
        docker pull $(publicRepository):$(version)-arm64v8
      displayName: 'Pull $(publicRepository) amd64, arm32v7, and arm64v8 docker images'
    - script: |
        docker manifest create \
          $(publicRepository):$(version) \
          --amend $(publicRepository):$(version)-amd64 \
          --amend $(publicRepository):$(version)-arm32v7 \
          --amend $(publicRepository):$(version)-arm64v8
      displayName: 'Create $(publicRepository) image manifest'
    - script: |
        docker manifest push $(publicRepository):$(version)
      displayName: 'Push $(publicRepository) image manifest'

